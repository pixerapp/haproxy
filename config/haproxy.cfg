global
  log /dev/log    local0
  log /dev/log    local1 notice
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  pidfile /var/run/haproxy.pid
  stats socket /run/haproxy/haproxy.sock mode 660 level admin
  stats timeout 30s
  server-state-file /tmp/ha_server_state
  daemon

  # From https://www.digitalocean.com/community/tutorials/how-to-implement-ssl-termination-with-haproxy-on-ubuntu-14-04.
  maxconn 2048
  tune.ssl.default-dh-param 2048

  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL). This list is from:
  #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
  ssl-default-bind-options no-sslv3

resolvers docker
  nameserver dns "${DNS_TCP_ADDR}:${DNS_TCP_PORT}"
  resolve_retries 3
  timeout retry 1s
  hold valid 3s

defaults
  balance roundrobin
  log     global
  mode    http
  option  httplog
  option  dontlognull
  option  forwardfor except 127.0.0.0/8
  option  http-server-close
  retries 3
  timeout connect 5000
  timeout client  50000
  timeout server  50000
  errorfile 400 /usr/local/etc/haproxy/errors/400.http
  errorfile 403 /usr/local/etc/haproxy/errors/403.http
  errorfile 408 /usr/local/etc/haproxy/errors/408.http
  errorfile 500 /usr/local/etc/haproxy/errors/500.http
  errorfile 502 /usr/local/etc/haproxy/errors/502.http
  errorfile 503 /usr/local/etc/haproxy/errors/503.http
  errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend http
  bind "${FLOATING_IP}":80
  bind "${FLOATING_IP}":443 ssl crt /etc/ssl/pixerapp.com/pixerapp.com.pem

  # Adds http header to end of end of the HTTP request.
  reqadd X-Forwarded-Proto:\ https

  # Redirect to HTTPS if the request comes to HTTP.
  redirect scheme https if !{ ssl_fc }

  stats enable
  stats uri /haproxy?stats
  stats auth "${STATSAUTH}"

  # Use Elasticsearch backend.
  acl es_host          hdr_beg(host)  es.
	use_backend elasticsearch if es_host

backend elasticsearch
  load-server-state-from-file global
  acl es_auth_success http_auth(ES_USERS)
  http-request auth realm Pixerapp if !es_auth_success
  server es1 elasticsearch1:9200 check resolvers docker

userlist ES_USERS
  user pixerapp password rqtFOg99ovFUA
